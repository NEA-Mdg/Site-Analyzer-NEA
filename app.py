# Importation des biblioth√®ques 

import streamlit as st
import pandas as pd
import altair as alt
import altair_saver
import numpy as np
import vl_convert as vlc
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import unicodedata
import matplotlib.pyplot as plt

import io
import re
import os
from io import BytesIO
import tempfile

from docx import Document
from docx.shared import Inches
from docx.shared import RGBColor
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.oxml.ns import qn


from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table
from reportlab.lib.styles import getSampleStyleSheet



# Cr√©ation des fonctions auxiliaires

def clean_statut(x):
    if pd.isna(x) or str(x).strip()=="":
        return "?" 
    x_sans_accent = unicodedata.normalize('NFKD', str(x)).encode('ASCII', 'ignore').decode('utf-8')
    return x_sans_accent.strip().lower()

def sauvegarder_fig_plotly(fig, nom_fichier):
    
    try:
        # Convertir fig Plotly ‚Üí PNG en m√©moire
        img_bytes = fig.to_image(format='png', width=900, height=600, scale=2)
        image = Image.open(io.BytesIO(img_bytes))
        
        # Recr√©er une fig Matplotlib avec l'image
        fig_mpl, ax = plt.subplots(figsize=(9, 6))
        ax.imshow(image)
        ax.axis('off')
        
        # Sauvegarder l‚Äôimage temporaire
        with tempfile.TemporaryDirectory() as tmpdirname:
            chemin_complet = os.path.join(tmpdirname, nom_fichier)
            fig_mpl.savefig(chemin_complet, bbox_inches='tight')
            plt.close(fig_mpl)
            # Copier l'image temporaire pour retour stable
            with open(chemin_complet, "rb") as fsrc:
                temp_path = os.path.join(tempfile.gettempdir(), nom_fichier)
                with open(temp_path, "wb") as fdst:
                    fdst.write(fsrc.read())
            return temp_path
    except Exception as e:
        print(f"[Erreur lors de la sauvegarde de la figure : {e}]")
        return None




def generer_rapport_word(site,date_debut, date_fin,date_jour,
                          df_production,img_production, df_etat, img_etat,
                          img1_evolution,img2_evolution,inclure_prod=True,inclure_etat=True, inclure_evolution=True,
                          inclure_synthese_prod=True,inclure_repartition_prod=True, inclure_etat_dominant=True,inclure_etat_repartition=True,inclure_prod_solaire=True,inclure_prod_source=True,logo_path=None):
    doc = Document()

    def add_text_paragraph(text,bold=False, italic=False):
        p = doc.add_paragraph()
        run = p.add_run(text)
        run.font.name = 'Calibri'
        run.bold = bold
        run.italic = italic
        run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Calibri')
        run.font.color.rgb = RGBColor(0, 0, 0)

    def add_heading2(text):
        p = doc.add_heading(text, level=1)
        run = p.runs[0]
        run.font.size = Pt(16)
        run.font.color.rgb = RGBColor(0, 51, 102)  # bleu fonc√©

    
    def add_centered_plotly_image(doc, image_path, width_in_inches=5):
        p = doc.add_paragraph()
        p.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        run = p.add_run()
        if not image_path or not os.path.exists(image_path):
            run.add_text("[Erreur: figure absente]")
            return
        try:
            run.add_picture(image_path, width=Inches(width_in_inches))
        except Exception as e:
            run.add_text(f"[Erreur: impossible d‚Äôajouter le graphique ‚Äì {e}]")
                
    def add_table_from_df(df, afficher_index=True):
        df = df.copy()
        if afficher_index:
        
            if df.index.name is None:
                df.index.name = ""
            df_reset = df.reset_index()
        else:
            df_reset = df

        cols = len(df_reset.columns)
        table = doc.add_table(rows=1, cols=cols)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        table.autofit = True

        for row in table.rows:
            for cell in row.cells:
                cell.width = Inches(1.75)

       


        # Ent√™te
        hdr_cells = table.rows[0].cells
        for i, col in enumerate(df_reset.columns):
            paragraph = hdr_cells[i].paragraphs[0]
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            paragraph.style = doc.styles['Normal']
            run = paragraph.add_run(str(col))
            run.font.name = 'Calibri'
            run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Calibri')
            run.font.size = Pt(10)

        # Donn√©es
        for _, row in df_reset.iterrows():
            row_cells = table.add_row().cells
            for i, item in enumerate(row):
                paragraph = row_cells[i].paragraphs[0]
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                paragraph.style = doc.styles['Normal']
                run = paragraph.add_run(str(item) if pd.notna(item) else "‚Äî")
                run.font.name = 'Calibri'
                run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Calibri')
                run.font.size = Pt(10)

    
    # Logo en haut de page
    if logo_path:
        p_logo = doc.add_paragraph()
        p_logo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        run_logo = p_logo.add_run()
        run_logo.add_picture(logo_path, width=Inches(1))
    
    # Titre principal
    titre = doc.add_heading(f"Rapport d'analyse {site}", 0)
    titre.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = titre.runs[0]
    run.font.color.rgb = RGBColor(0, 0, 0)
    run.font.bold = True

    # Infos g√©n√©rales
    add_text_paragraph(f"P√©riode analys√©e : {date_debut} ‚Üí {date_fin}")

    # ========================
    # 1 - PRODUCTION ENERGETIQUE
    # ========================
    if inclure_prod :
        add_heading2("Production √©nerg√©tique")
     

        if inclure_synthese_prod :
            # Tableau de production
            add_text_paragraph("Synth√®se de production par source",bold=True)
            add_table_from_df(df_production,afficher_index=True)

        if inclure_repartition_prod :
            doc.add_paragraph()
            # Graphe camembert
            add_text_paragraph("R√©partition de la production par source",bold=True)
            add_centered_plotly_image(doc,img_production)
        
        doc.add_page_break()

    # ========================
    # 2 - ETAT DE FONCTIONNEMENT
    # ========================

    if inclure_etat :
        add_heading2("√âtat de fonctionnement")
    

        if inclure_etat_dominant:
            # Tableau √©tat dominant par source
            add_text_paragraph("√âtat dominant par source",bold=True)
            add_table_from_df(df_etat,afficher_index=False)

        if inclure_etat_repartition :
            doc.add_paragraph()
            # Graphe camembert
            add_text_paragraph("R√©partition de l‚Äô√©tat de l‚Äôinstallation globale",bold=True)
            add_centered_plotly_image(doc,img_etat)
        doc.add_page_break()

    # ========================
    # 3 - EVOLUTION TEMPORELLE
    # ========================

    if inclure_evolution :
        
        add_heading2("√âvolution temporelle")
     

        if inclure_prod_solaire:

            # Graphique production r√©elle vs th√©orique
            add_text_paragraph("Production solaire r√©elle vs th√©orique (Energie)",bold=True)
            add_centered_plotly_image(doc,img1_evolution)

        if inclure_prod_source :
            doc.add_paragraph()
            # Graphique production quotidienne par source
            add_text_paragraph("Production quotidienne par source (Puissance)",bold=True)
            add_text_paragraph(f"R√©sultat du {date_jour}",italic=True)
            add_centered_plotly_image(doc,img2_evolution)

    temp_path = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
    doc.save(temp_path.name)
    return temp_path.name
    


# Configuration de l'affichage outil
st.set_page_config(
	page_title="Site Analyzer", 
	page_icon="üîÜ",
	layout="wide",
	initial_sidebar_state="expanded"
	)


# Initialisation des variables
if "site_name" not in st.session_state:
    st.session_state.site_name = ""
if "fichier_donnees" not in st.session_state:
    st.session_state.fichier_donnees = None
if "df_donnees" not in st.session_state:
    st.session_state.df_donnees = None



# Barre lat√©rale pour la navigation
onglet = st.sidebar.radio(
    "",
    ["üí° Indications", "üìÅ Chargement de donn√©es", "üìä Analyse & Visualisation"]
)



# Onglet 1 
if onglet == "üí° Indications":
    st.title("üí° Indications")

    
    st.markdown("---")

    st.subheader("üìÑ Format du fichier attendu")


    colonnes_attendues = [
        'date', 'heure',
        'puissance_grid', 'puissance_ge', 'puissance_solaire', 'puissance_conso',
        'energie_grid', 'energie_ge', 'energie_solaire', 'energie_solaire_theorique',
        'energie_conso',
        'statut_grid', 'statut_ge', 'statut_solaire', 'statut_installation'
    ]

    df_exemple = pd.DataFrame([
        ['2025-07-10', '08:00', 5.2, 1.3, 3.4, 9.9, 1.1, 0.5, 2.8, 3.0, 4.5, 'on', 'normal', 'excellent', 'ras'],
        ['2025-08-18', '08:10', 5.3, 1.4, 3.6, 10.1, 1.2, 0.6, 2.9, 3.2, 4.7, 'on', 'sous-regime', 'critique', 'panne nea'],
        ['2025-10-10', '13:20', 5.4, 1.2, 3.7, 10.3, 1.3, 0.4, 3.0, 3.3, 4.8, 'off', 'eteint', 'mauvais', 'ecretage client'],
        ['2025-12-03', '18:00', 5.4, 1.2, 3.7, 10.3, 1.3, 0.4, 3.0, 3.3, 4.8, 'off', 'eteint', 'tolerable', 'ecretage client']
    ], columns=colonnes_attendues)

    st.dataframe(df_exemple)

    st.markdown("""
    #### üìå D√©tails des colonnes

    - `date` : date au format `YYYY-MM-DD`
    - `heure` : heure au format `HH:MM` 
    - `puissance_*` : puissances en **kW**
    - `energie_*` : √©nergies en **kWh**
    - `statut_grid` : `"on"` ou `"off"`
    - `statut_ge` : `"eteint"`, `"normal"` ou `"sous-regime"`
    - `statut_solaire` : `"critique"`, `"mauvais"`, `"tolerable"` ou `"excellent"`
    - `statut_installation` : `"panne nea"`, `"ecretage client"`, `"ras"` ou `""` (vide)

    *Le fichier doit contenir **exactement 15 colonnes** dans cet ordre pr√©cis.*
    """)

    st.markdown("---")
    st.markdown(" ‚ö†Ô∏è Points de vigilance : ")
    st.warning("""
    - 1/ Les fichiers doivent √™tre au **format Excel (.xlsx / .xlsm) ou CSV (.csv)**  
    - 2/ Respecter strictement l‚Äô**ordre des colonnes** tel que d√©fini pour le tableau de donn√©es (les noms ne sont pas importants)
    - 3/ V√©rifier que le **format de date et heure** utilis√© soit bien conforme √† celui requis 
    - 4/ S‚Äôassurer que toutes les valeurs soient exprim√©es dans les **unit√©s** demand√©es
    - 5/ V√©rifier que toutes les **valeurs num√©riques et textuelles** soient **valides** (aucun caract√®re non-autoris√© ne doit √™tre pr√©sent )
    """)    

    st.markdown("A.R.")

# Onglet 2 
elif onglet == "üìÅ Chargement de donn√©es":
    st.title("üìÅ Chargement de donn√©es")

    # 1. Entr√©e du nom du site
    site_name = st.text_input("Nom du site", value=st.session_state.site_name)
    st.session_state.site_name = site_name

    st.write("")

    # 2. Upload du fichier unique
    fichier = st.file_uploader("üìÑ Importer le fichier de donn√©es (CSV ou Excel)", type=["csv", "xlsx"])

    st.write("")
    st.write("")

    # 3. Bouton de validation
    if st.button("Valider"):

        if fichier is None:
            st.error("‚ùå Aucun fichier n‚Äôa √©t√© import√©.")
        else:
            try:
                if fichier.name.endswith(".csv"):
                    df = pd.read_csv(fichier)
                else:
                    df = pd.read_excel(fichier)

                if df.shape[1] != 15:
                    st.error(f"‚ùå Le fichier contient {df.shape[1]} colonnes au lieu de 15.")
                else:
                    # Sauvegarde en session
                    st.session_state.fichier_donnees = fichier
                    st.session_state.df_donnees = df
                    st.success(f"‚úÖ Donn√©es du site {site_name} charg√©es avec succ√®s ({df.shape[0]} lignes, 15 colonnes).")

            except Exception as e:
                st.error(f"‚ùå Erreur lors de la lecture du fichier : {e}")

# Onglet 3
elif onglet == "üìä Analyse & Visualisation":
    st.title(f"üìä Analyse & Visualisation {st.session_state.site_name}")

    if st.session_state.df_donnees is None:
        st.warning("‚ö†Ô∏è Aucune donn√©e charg√©e. Veuillez d‚Äôabord importer un fichier dans l‚Äôonglet pr√©c√©dent.")
    else:
        df = st.session_state.df_donnees.copy()

        #-----------------------
        # NETTOYAGE DE DONNEES
        #-----------------------

        # 1. Renommage des colonnes
        df.columns = [
            'date', 'heure',
            'puissance_grid', 'puissance_ge', 'puissance_solaire', 'puissance_conso',
            'energie_grid', 'energie_ge', 'energie_solaire', 'energie_solaire_theorique',
            'energie_conso',
            'statut_grid', 'statut_ge', 'statut_solaire', 'statut_installation'
        ]

        # 2. Cr√©ation d'une colonne datetime (fusion date + heure)
        df['datetime'] = pd.to_datetime(df['date'] + ' ' + df['heure'], format='%Y-%m-%d %H:%M:%S')

        # 3. Conversion des colonnes num√©riques en float
        cols_numeriques = [
            'puissance_grid', 'puissance_ge', 'puissance_solaire', 'puissance_conso',
            'energie_grid', 'energie_ge', 'energie_solaire', 'energie_solaire_theorique',
            'energie_conso'
        ]

        for col in cols_numeriques:
            df[col] = pd.to_numeric(df[col], errors='coerce')

        # 4. Nettoyage des colonnes de statut
        cols_statut = ['statut_grid', 'statut_ge', 'statut_solaire', 'statut_installation']

        for col in cols_statut:
            df[col] = df[col].apply(clean_statut)

        # 5. R√©organisation des colonnes : mettre datetime en premier
        colonnes_ordre = ['datetime'] + [col for col in df.columns if col != 'datetime']
        df = df[colonnes_ordre]
        df = df.sort_values("datetime").reset_index(drop=True)

        #-----------------------
        # TRAITEMENT DE DONNEES
        #-----------------------

        # 1. Choix de la p√©riode d'analyse

        st.write("")
        st.write("")

        st.write("**üìÖ S√©lection de la p√©riode d‚Äôanalyse**")

        st.write("*Pour une analyse sur un jour, s√©lectionnez la **m√™me date** en d√©but et fin.*")

        min_date = df["datetime"].min().date()
        max_date = df["datetime"].max().date()

        col1, col2 = st.columns(2)
        with col1:
            date_debut = st.date_input("**Date de d√©but**", min_value=min_date, max_value=max_date, value=min_date)
        with col2:
            date_fin = st.date_input("**Date de fin**", min_value=min_date, max_value=max_date, value=max_date)
        
        if date_fin < date_debut:
            st.error("‚ùå La date de fin doit √™tre sup√©rieure ou √©gale √† la date de d√©but.")
            st.stop()
        
        df_data= df[(df["datetime"].dt.date >= date_debut) & (df["datetime"].dt.date <= date_fin)]

        
        st.write("")
        st.write("")
        st.write("")

        # 2. Production √©nerg√©tique

        st.header("üîã Production √©nerg√©tique")

        st.write("")

        # >>>> Tableau synth√®se

        st.markdown("**üîçSynth√®se de production par source**")

        # Calcul des donn√©es utiles
        pic_grid = df_data["puissance_grid"].max()
        pic_ge = df_data["puissance_ge"].max()
        pic_solaire = df_data["puissance_solaire"].max()
        pic_total = df_data["puissance_conso"].max()

        energie_grid = df_data["energie_grid"].sum()
        energie_ge = df_data["energie_ge"].sum()
        energie_solaire = df_data["energie_solaire"].sum()
        energie_solaire_theo = df_data["energie_solaire_theorique"].sum()
        energie_totale = df_data["energie_conso"].sum()

        pertes_solaire = energie_solaire_theo - energie_solaire

        pas_min = 10
        h_marche_grid = df_data[df_data["puissance_grid"] > 0].shape[0] * pas_min / 60
        h_marche_ge = df_data[df_data["puissance_ge"] > 0].shape[0] * pas_min / 60
        h_marche_solaire = df_data[df_data["puissance_solaire"] > 0].shape[0] * pas_min / 60

        # Tableau crois√© de synth√®se
        tableau1 = pd.DataFrame({
            "Grid": [
                round(pic_grid, 2),
                round(h_marche_grid, 2),
                round(energie_grid, 2),
                None,
                None
            ],
            "GE": [
                round(pic_ge, 2),
                round(h_marche_ge, 2),
                round(energie_ge, 2),
                None,
                None
            ],
            "Solaire": [
                round(pic_solaire, 2),
                round(h_marche_solaire, 2),
                round(energie_solaire, 2),
                round(energie_solaire_theo, 2),
                round(pertes_solaire, 2)
            ],
            "Installation globale": [
                round(pic_total, 2),
                None,
                round(energie_totale, 2),
                None,
                None
            ]
        }, index=[
            "Pic de puissance (kW)",
            "Heures de marche (h)",
            "√ânergie r√©elle produite (kWh)",
            "√ânergie th√©orique produite (kWh)",
            "Pertes √©nerg√©tiques (kWh)"
        ])

        st.dataframe(tableau1.style.format(na_rep="‚Äî"), use_container_width=True)

        st.write("")
        st.write("")

        # >>>> R√©partition √©nerg√©tique

        st.markdown("**üîç R√©partition de la production totale**")

        # Cr√©ation des donn√©es pour le camembert
        labels = ["Grid", "GE", "Solaire"]
        values = [energie_grid, energie_ge, energie_solaire]
        colors = ["#8B2A03", "#003366", "#FFA500"]  

        # Cr√©ation du graphique avec Plotly
        fig = go.Figure(data=[go.Pie(
        labels=labels,
        values=values,
        marker=dict(colors=colors),
        )])
        
        # Affichage du graphique
        fig.update_layout(title_text="")
        st.plotly_chart(fig, use_container_width=True)

        st.write("")
        st.write("")
        st.write("")
        
        # 3. Etat de fonctionnement

        st.header("üõ†Ô∏è Etat de fonctionnement")
        
        st.write("")
        
        # >>>> Etat dominant par source
        st.markdown("**üîç √âtat dominant par source**")

        # Normalisation des statuts 
        df_data["statut_solaire"] = df_data["statut_solaire"].replace("mauvaise", "mauvais")

        # Remplacer les valeurs manquantes par 'absence de donn√©es'
        df_data["statut_grid"] = df_data["statut_grid"].fillna("?")
        df_data["statut_ge"] = df_data["statut_ge"].fillna("?")
        df_data["statut_solaire"] = df_data["statut_solaire"].fillna("?")
        df_data["statut_installation"] = df_data["statut_installation"].fillna("?")

        # D√©finition d'une fonction qui trouve la valeur la plus fr√©quente
        def statut_dominant(colonne, ignorer_eteint=False):
            serie = df_data[colonne]
            
            if ignorer_eteint and colonne == "statut_ge":
                serie = serie[serie != "eteint"]
            
            mode_val = serie.mode()
            return mode_val.iloc[0] if not mode_val.empty else "?"

        etat_dominant = {
            "Grid": statut_dominant("statut_grid"),
            "GE": statut_dominant("statut_ge",ignorer_eteint=True),
            "Solaire": statut_dominant("statut_solaire"),
            "Installation globale": statut_dominant("statut_installation")
        }

        # Cr√©ation du DataFrame pour l'affichage
        df_etat_dominant = pd.DataFrame(etat_dominant, index=["Statut dominant"]).T.reset_index()
        df_etat_dominant.columns = ["Source", "Statut dominant"]

        # Affichage du tableau
        st.dataframe(df_etat_dominant, use_container_width=True, hide_index=True)

        st.write("")
        st.write("")
        
        # >>>> R√©partition de l'√©tat de l‚Äôinstallation globale
        st.markdown("**üîç R√©partition de l‚Äô√©tat de l‚Äôinstallation globale**")

        # Comptage des occurrences
        repartition_etat = df_data["statut_installation"].value_counts().reset_index()
        repartition_etat.columns = ["Statut", "Nombre"]
 
        # Personnalisation des couleurs personnalis√©es 
        couleurs_etats = {
            "panne nea": "#D62728",           
            "ecretage client": "#0F58DF",     
            "ras": "#2CA02C",                 
            "?": "#B0B0B0"   
        }

        # Association d' une couleur √† chaque statut pr√©sent
        repartition_etat["Couleur"] = repartition_etat["Statut"].map(couleurs_etats)

        # Cr√©ation du camembert 
        fig_etat = go.Figure(
            data=[
                go.Pie(
                    labels=repartition_etat["Statut"],
                    values=repartition_etat["Nombre"],
                    marker=dict(colors=repartition_etat["Couleur"]),
                    textinfo="percent"
                )
            ]
        )

        # Affichage du graphique
        st.plotly_chart(fig_etat, use_container_width=True)


        st.write("")
        st.write("")
        st.write("")
        
        # 3. Evolution temporelle

        st.header("üìà √âvolution temporelle")
        
        st.write("")

        # >>>> Production solaire r√©elle vs th√©oriquee 
        st.markdown("**üîç Production solaire r√©elle vs th√©orique (√ânergie)**")
                
        # Pr√©paration des donn√©es : grouper par heure (sur 24h)
        df_energy = df_data.copy()
        df_energy["heure"] = df_energy["datetime"].dt.strftime("%H")
        df_energy_grouped = df_energy.groupby("heure")[["energie_solaire", "energie_solaire_theorique"]].sum().reset_index()

        # Cr√©ation du graphique
        fig1 = go.Figure()

        # Barres : √©nergie solaire r√©elle
        fig1.add_trace(go.Bar(
            x=df_energy_grouped["heure"],
            y=df_energy_grouped["energie_solaire"],
            name="E. solaire r√©elle (kWh)",
            marker_color="#FFA500",
            hovertemplate="Heure : %{x}<br>Energie solaire r√©elle : %{y:.2f} kWh<extra></extra>"
        ))

        # Courbe : √©nergie solaire th√©orique
        fig1.add_trace(go.Scatter(
            x=df_energy_grouped["heure"],
            y=df_energy_grouped["energie_solaire_theorique"],
            name="E. solaire th√©orique (kWh)",
            mode="lines+markers",
            line=dict(color="#EC0E0E", width=3),
            hovertemplate="Heure : %{x}<br>Energie solaire th√©orique : %{y:.2f} kWh<extra></extra>"
        ))

        # Mise en forme
        fig1.update_layout(
            xaxis_title="Heure de la journ√©e",
            yaxis_title="√ânergie (kWh)",
            barmode="group",
            template="simple_white",
            
        )


        st.plotly_chart(fig1, use_container_width=True)

        st.write("")
        st.write("")

        # >>>> Production quotidienne par source 

        st.markdown("**üîç Production quotidienne par source (Puissance)**")

        st.write("")

        
        # Filtrage des jours disponibles dans la p√©riode s√©lectionn√©e
        jours_disponibles = df_data["datetime"].dt.date.unique()

        # Selection pour choisir un jour
        jour_choisi = st.selectbox("üìÜ Choisir un jour", options=jours_disponibles)

        # Filtrage des donn√©es du jour choisi
        df_jour = df_data[df_data["datetime"].dt.date == jour_choisi].copy()

        # Extraction de l'heure exacte pour affichage pr√©cis
        
        df_jour["heure"] = df_jour["datetime"].dt.strftime("%H:%M")
        

        # Cr√©ation du graphique
        fig2 = go.Figure()

        fig2.add_trace(go.Scatter(
            x=df_jour["heure"],
            y=df_jour["puissance_grid"],
            mode="lines",
            name="Grid",
            line=dict(color="#8B2A03")
        ))

        fig2.add_trace(go.Scatter(
            x=df_jour["heure"],
            y=df_jour["puissance_ge"],
            mode="lines",
            name="GE",
            line=dict(color="#003366")
        ))

        fig2.add_trace(go.Scatter(
            x=df_jour["heure"],
            y=df_jour["puissance_solaire"],
            mode="lines",
            name="Solaire",
            line=dict(color="#FFA500")
        ))

        fig2.add_trace(go.Scatter(
            x=df_jour["heure"],
            y=df_jour["puissance_conso"],
            mode="lines",
            name="Installation globale",
            line=dict(color="#6B6767", dash="dash")
        ))

        # Mise en forme
        fig2.update_layout(
            xaxis_title="Heure",
            yaxis_title="Puissance (kW)",
            template="simple_white",
          
        )



        st.plotly_chart(fig2, use_container_width=True)


        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")




        #-----------------------
        # G√©n√©ration de rapport
        #-----------------------

        st.markdown("### üìë Sections √† inclure dans le rapport")

        # Sections principales
        inclure_prod = st.checkbox("**1. Production √©nerg√©tique**", value=True)
        inclure_synthese_prod = st.checkbox("‚Ü≥ Synth√®se de production par source", value=True)
        inclure_repartition_prod = st.checkbox("‚Ü≥ R√©partition de la production totale", value=True)

        inclure_etat = st.checkbox("**2. √âtat de fonctionnement**", value=True)
        inclure_etat_dominant = st.checkbox("‚Ü≥ √âtat dominant par source", value=True)
        inclure_etat_repartition = st.checkbox("‚Ü≥ R√©partition de l‚Äô√©tat de l'installation globale", value=True)

        inclure_evolution = st.checkbox("**3. √âvolution temporelle**", value=True)
        inclure_prod_solaire = st.checkbox("‚Ü≥ Production solaire r√©elle vs th√©orique (Energie)", value=True)
        inclure_prod_source = st.checkbox("‚Ü≥ Production quotidienne par source (Puissance)", value=True)

        # Bouton de g√©n√©ration
        if st.button("G√©n√©rer le rapport"):

            # === Param√®tres √† r√©cup√©rer dynamiquement ===
            site = st.session_state.site_name  # √† adapter selon ton app
            date_debut = date_debut.strftime("%Y-%m-%d")
            date_fin = date_fin.strftime("%Y-%m-%d")
            date_jour= jour_choisi.strftime("%Y-%m-%d")

            img_prod_path = sauvegarder_fig_plotly(fig, "repartition_production.png")
            img_etat_path = sauvegarder_fig_plotly(fig_etat, "repartition_etat.png")
            img_ev1_path = sauvegarder_fig_plotly(fig1, "prod_reelle_vs_theorique.png")
            img_ev2_path = sauvegarder_fig_plotly(fig2, "prod_quotidienne_sources.png")


            # === Appel de la fonction de g√©n√©ration ===
            rapport_path = generer_rapport_word (
            site=st.session_state.site_name,
            date_debut=date_debut,
            date_fin=date_fin,
            date_jour=jour_choisi,
            df_production=tableau1,
            img_production=img_prod_path,
            df_etat=df_etat_dominant,
            img_etat=img_etat_path,
            img1_evolution=img_ev1_path,
            img2_evolution=img_ev2_path,
            inclure_prod=inclure_prod,
            inclure_etat=inclure_etat,
            inclure_evolution=inclure_evolution,
            inclure_synthese_prod=inclure_synthese_prod,
            inclure_repartition_prod=inclure_repartition_prod,
            inclure_etat_dominant=inclure_etat_dominant,
            inclure_prod_solaire=inclure_prod_solaire,
            inclure_prod_source=inclure_prod_source,
            logo_path="logo_NEA.png"
            )
            with open(rapport_path, "rb") as f:
                st.download_button("üì• T√©l√©charger le rapport", f, file_name=f"rapport_analyse_{date_debut}_{date_fin}.docx")

            
            # Nettoyage des fichiers images g√©n√©r√©s
            #for img_path in [img_prod_path, img_etat_path, img_ev1_path, img_ev2_path]:
                #if os.path.exists(img_path):
                   # os.remove(img_path)




# Cod√© par Amboara RASOLOFOARIMANANA



                               


                                

                            
                            